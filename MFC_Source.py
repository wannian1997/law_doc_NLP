# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'labelv1.4.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys, time
from PyQt5 import QtCore, QtGui, QtWidgets
import win32com.client as wc
import os
from pyltp import SentenceSplitter


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1302, 1015)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton_7 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_7.setObjectName("pushButton_7")
        self.gridLayout.addWidget(self.pushButton_7, 11, 11, 1, 1)
        self.pushButton_16 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_16.setObjectName("pushButton_16")
        self.gridLayout.addWidget(self.pushButton_16, 20, 11, 1, 1)
        self.pushButton_15 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_15.setObjectName("pushButton_15")
        self.gridLayout.addWidget(self.pushButton_15, 19, 11, 1, 1)
        self.pushButton_13 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_13.setObjectName("pushButton_13")
        self.gridLayout.addWidget(self.pushButton_13, 17, 11, 1, 1)
        self.pushButton_6 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_6.setObjectName("pushButton_6")
        self.gridLayout.addWidget(self.pushButton_6, 10, 11, 1, 1)
        self.pushButton_8 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_8.setObjectName("pushButton_8")
        self.gridLayout.addWidget(self.pushButton_8, 12, 11, 1, 1)
        self.pushButton_19 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_19.setObjectName("pushButton_19")
        self.gridLayout.addWidget(self.pushButton_19, 0, 8, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 0, 2, 1, 1)
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setIconSize(QtCore.QSize(25, 25))
        self.pushButton_3.setObjectName("pushButton_3")
        self.gridLayout.addWidget(self.pushButton_3, 7, 11, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 0, 9, 1, 1)
        self.pushButton_5 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_5.setObjectName("pushButton_5")
        self.gridLayout.addWidget(self.pushButton_5, 9, 11, 1, 1)
        self.pushButton_12 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_12.setObjectName("pushButton_12")
        self.gridLayout.addWidget(self.pushButton_12, 16, 11, 1, 1)
        self.pushButton_14 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_14.setObjectName("pushButton_14")
        self.gridLayout.addWidget(self.pushButton_14, 18, 11, 1, 1)
        self.radioButton = QtWidgets.QRadioButton(self.centralwidget)
        self.radioButton.setObjectName("radioButton")
        self.gridLayout.addWidget(self.radioButton, 0, 4, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem2, 0, 3, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 1, 1, 1)
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 0, 1, 1)
        self.pushButton_4 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_4.setObjectName("pushButton_4")
        self.gridLayout.addWidget(self.pushButton_4, 8, 11, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 0, 5, 1, 1)
        self.pushButton_11 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_11.setObjectName("pushButton_11")
        self.gridLayout.addWidget(self.pushButton_11, 15, 11, 1, 1)
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setAlignment(QtCore.Qt.AlignCenter)
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 0, 11, 1, 2)
        self.pushButton_17 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_17.setObjectName("pushButton_17")
        self.gridLayout.addWidget(self.pushButton_17, 21, 11, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem4, 0, 6, 1, 1)
        self.pushButton_9 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_9.setObjectName("pushButton_9")
        self.gridLayout.addWidget(self.pushButton_9, 13, 11, 1, 1)
        self.pushButton_18 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_18.setObjectName("pushButton_18")
        self.gridLayout.addWidget(self.pushButton_18, 0, 7, 1, 1)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem5, 0, 10, 1, 1)
        self.pushButton_10 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_10.setObjectName("pushButton_10")
        self.gridLayout.addWidget(self.pushButton_10, 14, 11, 1, 1)
        self.textEdit = QtWidgets.QTextEdit(self.centralwidget)
        self.textEdit.setObjectName("textEdit")
        self.textEdit.setReadOnly(True)
        self.gridLayout.addWidget(self.textEdit, 7, 0, 15, 11)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.OpenFile)  # 打开文件
        self.pushButton_2.clicked.connect(self.SaveFile)  # 保存文件
        # # 标签触发
        self.pushButton_3.clicked.connect(self.label0)
        self.pushButton_4.clicked.connect(self.label1)
        self.pushButton_5.clicked.connect(self.label2)
        self.pushButton_6.clicked.connect(self.label3)
        self.pushButton_7.clicked.connect(self.label4)
        self.pushButton_8.clicked.connect(self.label5)
        self.pushButton_9.clicked.connect(self.label6)
        self.pushButton_10.clicked.connect(self.label7)
        self.pushButton_11.clicked.connect(self.label8)
        self.pushButton_12.clicked.connect(self.label9)
        self.pushButton_13.clicked.connect(self.label10)
        self.pushButton_14.clicked.connect(self.label11)
        self.pushButton_15.clicked.connect(self.label12)
        self.pushButton_16.clicked.connect(self.label13)
        self.pushButton_17.clicked.connect(self.label14)

        # 左右移动按钮
        self.pushButton_18.clicked.connect(self.leftbutton)
        self.pushButton_19.clicked.connect(self.rightbutton)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Label v2.5"))
        self.pushButton_7.setText(_translate("MainWindow", "影响判决的因素"))
        self.pushButton_6.setText(_translate("MainWindow", "案由"))
        self.pushButton_8.setText(_translate("MainWindow", "法律依据"))
        self.pushButton_19.setText(_translate("MainWindow", "下一句"))
        self.pushButton_3.setText(_translate("MainWindow", "案号"))
        self.pushButton_5.setText(_translate("MainWindow", "司法鉴定"))
        self.pushButton_12.setText(_translate("MainWindow", ""))
        self.radioButton.setText(_translate("MainWindow", "智能标注"))
        self.pushButton_2.setText(_translate("MainWindow", "保存文件"))
        self.pushButton.setText(_translate("MainWindow", "打开文件"))
        self.pushButton_4.setText(_translate("MainWindow", "被告人信息"))
        self.pushButton_11.setText(_translate("MainWindow", ""))
        self.label.setText(_translate("MainWindow", "标签栏"))
        self.pushButton_9.setText(_translate("MainWindow", "判决结果"))
        self.pushButton_18.setText(_translate("MainWindow", "上一句"))
        self.pushButton_10.setText(_translate("MainWindow", ""))

    warning = [6]
    display_text = []
    back_text = []
    label_list = ['案号', '被告人信息', '司法鉴定', '案由', '影响判决因素', '判决依据', '判决结果']
    save_text_line = []
    linenum = 1
    dir0 = 'C:\\'

    def OpenFile(self):
        from PyQt5.QtWidgets import QFileDialog
        dir = QFileDialog()  # 创建文件对话框
        # dir.setFileMode(QFileDialog.ExistingFiles)  # 设置多选
        dir.setDirectory(self.dir0)  # 设置初始路径为C盘
        if dir.exec_():  # 判断是否选择了文件
            self.display_text = []
            self.back_text = []
            self.linenum = 1
            self.dir0 = dir.selectedFiles()[0]
            print(self.dir0)
            if self.dir0.endswith('.txt'):
                with open(self.dir0, 'r', encoding='utf-8') as file:  # 以读取模式打开文件
                    k = 0
                    while True:
                        self.display_text.append(file.readline())
                        k += 1
                        if self.display_text[k - 1] == "":
                            break
                    self.back_text = self.display_text[:]
                    self.display(self.display_text, self.linenum)
                    file.Close()
            elif self.dir0.endswith('.doc'):
                text1 = []
                # path_list = os.docxPath.basename(self.dir0)
                # path_list = path_list[:-4]
                word = wc.Dispatch('Word.Application')
                doc = word.Documents.Open(self.dir0)
                word.Visible = 0
                word.DisplayAlerts = 0
                for para in doc.paragraphs:
                    text1.append(para.Range.Text)

                for t in text1:
                    t = t.replace('\r', '')
                    self.back_text.append(t)

                self.back_text = self.paras2sentences(self.back_text)
                for par in self.back_text:
                    if par == '）\t\n':
                        self.back_text.remove('）\t\n')

                self.display_text = self.back_text[:]
                # self.number2word(self.back_text)
                self.display_text.append('')
                # self.waringlabel(self.display_text, self.warning)

                self.rules_tag(self.display_text, self.label_list)

                self.display(self.display_text, self.linenum)
                print(self.display_text)  # 后台操作
                print(self.back_text)  # 前台展示
                doc.Close()

            elif self.dir0.endswith('.docx'):
                text1 = []
                word = wc.Dispatch('Word.Application')
                doc = word.Documents.Open(self.dir0)
                word.Visible = 0
                word.DisplayAlerts = 0
                for para in doc.paragraphs:
                    text1.append(para.Range.Text)

                for t in text1:
                    t = t.replace('\r', '')
                    self.back_text.append(t)

                self.back_text = self.paras2sentences(self.back_text)
                for par in self.back_text:
                    if par == '）\t\n':
                        self.back_text.remove('）\t\n')

                self.display_text = self.back_text[:]
                # self.number2word(self.back_text)
                self.display_text.append('')
                # self.waringlabel(self.display_text, self.warning)
                self.rules_tag(self.display_text)
                self.display(self.display_text, self.linenum)
                print(self.display_text)  # 前台操作
                print(self.back_text)  # 后台展示
                doc.Close()

    # 保存文件
    def SaveFile(self):
        # from PyQt5.QtWidgets import QFileDialog
        # _translate = QtCore.QCoreApplication.translate
        # fileName2, ok2 = QFileDialog.getSaveFileName(None, "文件保存", self.dir0.replace('doc', 'txt'))
        save_text_list = []
        path = os.path.dirname(self.dir0) + "/txt/"
        if self.dir0.endswith('.doc'):
            save_path = path + os.path.basename(self.dir0).replace('doc', 'txt')
        elif self.dir0.endswith('.docx'):
            save_path = path + os.path.basename(self.dir0).replace('docx', 'txt')
        # save_path = docxPath + os.docxPath.basename(self.dir0).replace('doc', 'txt')
        elif self.dir0.endswith('.txt'):
            save_path = path + os.path.basename(self.dir0)
        # save_path = docxPath + os.docxPath.basename(self.dir0).replace('doc', 'txt')
        print(save_path)
        # 保存含有标签的句子
        for index_list in self.save_text_line:
            for index in index_list:
                save_text_list.append(self.back_text[index])

        if not os.path.isdir(path):
            os.makedirs(path)
        if save_path is not None:
            with open(file=save_path, mode='w+', encoding='utf-8') as file:
                # file.write(self.listreartostr(self.back_text))
                file.write(self.listreartostr(save_text_list))
            file.close()
            print('已保存！')
            print(self.save_text_line)
            from PyQt5.QtWidgets import QMessageBox  # 导入QMessageBox类
            # QMessageBox.warning(MainWindow, "warning", "输入错误", QMessageBox.Yes | QMessageBox.No, QMessageBox.Yes)
            QMessageBox.information(MainWindow, '提示', '保存成功', QMessageBox.Ok)

    def number2word(self, textlist):
        # k = 0
        for t in textlist:
            if t[-2:-1] == "\t":
                self.display_text.append(t)
            else:
                self.display_text.append(self.textdispose2(t, self.labeltext[int(t[-2:-1])], 1))

    # 按规则标注
    def rules_tag(self, text_list, label_list):
        index_list1 = []  # 找到句子在文章列表中对应索引列表
        index_list2 = []  # 找到句子在文章列表中对应索引列表
        index_list3 = []  # 找到句子在文章列表中对应索引列表
        index_list4 = []  # 找到句子在文章列表中对应索引列表
        index_list5 = []  # 找到句子在文章列表中对应索引列表
        index_list6 = []  # 找到句子在文章列表中对应索引列表
        index_list7 = []  # 找到句子在文章列表中对应索引列表
        for par in text_list:
            index1 = self.find_case_number(par, text_list)  # 案号索引
            index2 = self.find_defendant_information(par, text_list)  # 被告人信息索引
            index3 = 0
            index4 = 0
            index5 = 0
            index6 = 0
            index7 = 0
            # 将索引加入索引列表
            if index1 > 0:
                index_list1.append(index1)
            if index2 > 0:
                index_list2.append(index2)
            if index3 > 0:
                index_list3.append(index1)
            if index4 > 0:
                index_list4.append(index2)
            if index5 > 0:
                index_list5.append(index1)
            if index6 > 0:
                index_list6.append(index2)
            if index7 > 0:
                index_list7.append(index1)
        self.save_text_line.append(index_list1)
        self.save_text_line.append(index_list2)
        self.save_text_line.append(index_list3)
        self.save_text_line.append(index_list4)
        self.save_text_line.append(index_list5)
        self.save_text_line.append(index_list6)
        self.save_text_line.append(index_list7)
        # self.save_text_line[3].append(3)
        # print(self.save_text_line[1][1])
        for index_list in self.save_text_line:
            for index in index_list:
                self.tagging(index, self.save_text_line.index(index_list), label_list)  # 将对应句子打上标签
                print(index_list)

        print(self.save_text_line)

    # 在对应的句子打上对应标签
    def tagging(self, index, index_list_num, label_list):
        self.display_text[index] = self.textdispose2(self.display_text[index], label_list[index_list_num],
                                                     0)  # 在前台数据打标签
        self.back_text[index] = self.textdispose(self.back_text[index], index_list_num, 0)  # 在后台数据打标签

    def find_defendant_information(self, par, textlist):
        defendant_information = ['被告人', '男', '女', '年', '月', '日', '族', '住']  # 特征信息列表
        defendant_information_index = []  # 被告人特征信息索引
        index_count = 0
        for inf in defendant_information:
            index = par.find(inf)  # 在句子中找到特征字符串索引
            defendant_information_index.append(index)
        # 判断是否满足全部特征信息
        for index in defendant_information_index:
            # 满足条件为男女只有其一其他的全部找到
            if index == -1:
                index_count += 1
        # 返回文章中句子对应索引
        if index_count == 1:
            # print(defendant_information_index)
            return textlist.index(par)
        else:
            return -1

    # 找出案号句子
    def find_case_number(self, par, textlist):
        digitcount = 0  # 数字计数
        endindex = 0  # 数字的尾索引
        flagcount = 0
        flag1index = par.find('刑')  # ’刑‘字符索引
        flag2index = par.find('号')  # ’号‘字符索引
        for p in par:
            if p.isdigit():  # 判断par中连续字符数
                digitcount += 1
            else:  # 非数字时
                if digitcount >= 1:
                    endindex = par.index(p) - 1  # 连续的数字尾索引
                    # print(endindex)
                    if flag1index - endindex == 1:  # ’刑‘字符前是数字
                        flagcount += 1
                        # print('flag1-true')
                    if endindex - digitcount + 1 - flag1index == 2:  # ’刑‘和后面的数字隔一个字符
                        flagcount += 1
                        # print('flag2-true')
                    if flag2index - endindex == 1:  # ’号‘前面是数字
                        flagcount += 1
                        # print('flag3-true')
                    digitcount = 0
        if flagcount == 3:  # 当三个条件全满足时输出这句话在全文列表中的的索引
            return textlist.index(par)
        else:
            return -1

    def waringlabel(self, textlist, warning):
        print(len(warning))
        for n in warning:
            textlist[n - 1] = textlist[n - 1].replace('\n', '')  # 去除末尾换行符号
            textlist[n - 1] = textlist[n - 1] + "***" + "\n"

    def paras2sentences(self, paras):
        sentslist = []
        for par in paras:
            sents = SentenceSplitter.split(par)
            for sent in sents:
                sentslist.append(sent + '\t\n')
        return sentslist

    # 列表后部转换为字符串
    def listreartostr(self, lists, tmp=0):
        strings = ""
        for t in range(tmp, len(lists)):
            strings = strings + lists[t]
        return strings

    # 列表前部转换为字符串
    def listfronttostr(self, lists, tmp):
        strings = ""
        for t in range(tmp):
            strings = strings + lists[t]
        return strings

    # 文本处理
    def textdispose(self, text, label, len1):
        text = text.replace('\t', '')  # 去除末尾tab符号
        text = text.replace('\n', '')  # 去除末尾换行符号
        if len1 == 0:
            text = text[:] + "\t" + str(label) + "\n"
        else:
            text = text[:-1] + "\t" + str(label) + "\n"
        return text

    def textdispose2(self, text, label, len1):
        text = text.replace('\t', '')  # 去除末尾tab符号
        text = text.replace('\n', '')  # 去除末尾换行符号
        if len1 == 0:
            text = text[:] + "\t" + label + "\n"
        else:
            text = text[:-len1] + "\t" + label + "\n"
        return text

    def display(self, textlist, LineNum):
        textfront = self.listfronttostr(textlist, LineNum - 1)
        text = textlist[LineNum - 1]
        textrear = self.listreartostr(textlist, LineNum)
        self.textEdit.setText(textfront)  # 已标注
        self.textEdit.append("<font color='blue' size=5 b>" + text + "</font>")  # 标注行显示
        self.textEdit.append(textrear)  # 未标注

    #
    def leftbutton(self):
        if self.linenum > 1:
            self.linenum -= 1
            self.display(self.display_text, self.linenum)
            # print(self.linenum)

    def rightbutton(self):
        if self.linenum <= len(self.display_text) - 1:
            self.linenum += 1
            self.display(self.display_text, self.linenum)
            # print(self.linenum)

    def label0(self):
        lab0 = self.pushButton_3.text()
        if lab0:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                print(self.display_text[self.linenum - 1])
                print(self.back_text[self.linenum - 1])
                print(len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1]))
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab0,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 0, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab0,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 0, 1)
                print(self.display_text[self.linenum - 1])
                print(self.back_text[self.linenum - 1])
                self.save_text_line[0].append(self.linenum - 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)
                # print(self.linenum)
                # print(self.display_text[self.linenum - 1])
                # print(self.back_text)

    def label1(self):
        lab1 = self.pushButton_4.text()
        if lab1:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab1,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 1, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab1,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 1, 1)
                self.save_text_line[1].append(self.linenum - 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label2(self):
        lab2 = self.pushButton_5.text()
        if lab2:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab2,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 2, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab2,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 2, 1)
                self.save_text_line[2].append(self.linenum - 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label3(self):
        lab3 = self.pushButton_6.text()
        if lab3:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab3,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 3, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab3,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 3, 1)
                self.save_text_line[3].append(self.linenum - 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label4(self):
        lab4 = self.pushButton_7.text()
        if lab4:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab4,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 4, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab4,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 4, 1)
                self.save_text_line[4].append(self.linenum - 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label5(self):
        lab5 = self.pushButton_8.text()
        if lab5:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab5,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 5, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab5,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 5, 1)
                self.save_text_line[5].append(self.linenum - 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label6(self):
        lab6 = self.pushButton_9.text()
        if lab6:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab6,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 6, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab6,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 6, 1)
                self.save_text_line[6].append(self.linenum - 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label7(self):
        lab7 = self.pushButton_10.text()
        if lab7:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab7,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 7, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab7,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 7, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label8(self):
        lab8 = self.pushButton_11.text()
        if lab8:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab8,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 8, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab8,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 8, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label9(self):
        lab9 = self.pushButton_12.text()
        if lab9:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab9,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 9, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab9,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 9, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label10(self):
        lab10 = self.pushButton_13.text()
        print(lab10)
        if lab10:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab10,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 10, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab10,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 10, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label11(self):
        lab11 = self.pushButton_14.text()
        if lab11:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab11,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 11, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab11,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 11, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label12(self):
        lab12 = self.pushButton_15.text()
        if lab12:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab12,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 12, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab12,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 12, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label13(self):
        lab13 = self.pushButton_16.text()
        if lab13:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab13,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 13, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab13,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 13, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)

    def label14(self):
        lab14 = self.pushButton_17.text()
        if lab14:
            if self.linenum <= len(self.display_text) - 1:
                num = len(self.display_text[self.linenum - 1]) - len(self.back_text[self.linenum - 1])
                if num == 0:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab14,
                                                                            0)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 14, 0)
                else:
                    self.display_text[self.linenum - 1] = self.textdispose2(self.display_text[self.linenum - 1], lab14,
                                                                            num + 1)
                    self.back_text[self.linenum - 1] = self.textdispose(self.back_text[self.linenum - 1], 14, 1)
                self.linenum += 1
                self.display(self.display_text, self.linenum)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗口对象
    ui = Ui_MainWindow()  # 创建PyQt设计的窗口对象
    ui.setupUi(MainWindow)  # 调用PyQt窗体的方法对窗体对象进行初始化设置
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程